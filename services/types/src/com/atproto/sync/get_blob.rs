// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `com.atproto.sync.getBlob` namespace.
pub const NSID: &str = "com.atproto.sync.getBlob";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    ///The CID of the blob to fetch
    pub cid: atrium_api::types::string::Cid,
    ///The DID of the account.
    pub did: atrium_api::types::string::Did,
}
pub type Parameters = atrium_api::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    BlobNotFound(Option<String>),
    RepoNotFound(Option<String>),
    RepoTakendown(Option<String>),
    RepoSuspended(Option<String>),
    RepoDeactivated(Option<String>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Error::BlobNotFound(msg) => {
                write!(_f, "BlobNotFound")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::RepoNotFound(msg) => {
                write!(_f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::RepoTakendown(msg) => {
                write!(_f, "RepoTakendown")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::RepoSuspended(msg) => {
                write!(_f, "RepoSuspended")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::RepoDeactivated(msg) => {
                write!(_f, "RepoDeactivated")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
        }
        Ok(())
    }
}
