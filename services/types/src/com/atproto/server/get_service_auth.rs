// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `com.atproto.server.getServiceAuth` namespace.
pub const NSID: &str = "com.atproto.server.getServiceAuth";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    ///The DID of the service that the token will be used to authenticate with
    pub aud: atrium_api::types::string::Did,
    ///The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub exp: core::option::Option<i64>,
    ///Lexicon (XRPC) method to bind the requested token to
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub lxm: core::option::Option<atrium_api::types::string::Nsid>,
}
pub type Parameters = atrium_api::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    pub token: String,
}
pub type Output = atrium_api::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    ///Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.
    BadExpiration(Option<String>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Error::BadExpiration(msg) => {
                write!(_f, "BadExpiration")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
        }
        Ok(())
    }
}
