// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `app.bsky.notification.listNotifications` namespace.
pub const NSID: &str = "app.bsky.notification.listNotifications";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub limit: core::option::Option<atrium_api::types::LimitedNonZeroU8<100u8>>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub priority: core::option::Option<bool>,
    ///Notification reasons to include in response.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reasons: core::option::Option<Vec<String>>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub seen_at: core::option::Option<atrium_api::types::string::Datetime>,
}
pub type Parameters = atrium_api::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub notifications: Vec<Notification>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub priority: core::option::Option<bool>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub seen_at: core::option::Option<atrium_api::types::string::Datetime>,
}
pub type Output = atrium_api::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct NotificationData {
    pub author: crate::app::bsky::actor::defs::ProfileView,
    pub cid: atrium_api::types::string::Cid,
    pub indexed_at: atrium_api::types::string::Datetime,
    pub is_read: bool,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub labels: core::option::Option<Vec<crate::com::atproto::label::defs::Label>>,
    ///Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.
    pub reason: String,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reason_subject: core::option::Option<String>,
    pub record: atrium_api::types::Unknown,
    pub uri: String,
}
pub type Notification = atrium_api::types::Object<NotificationData>;
