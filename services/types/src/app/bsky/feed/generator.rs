// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `app.bsky.feed.generator` namespace.
use atrium_api::types::TryFromUnknown;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordData {
    ///Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub accepts_interactions: core::option::Option<bool>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub avatar: core::option::Option<atrium_api::types::BlobRef>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub content_mode: core::option::Option<String>,
    pub created_at: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub description: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub description_facets: core::option::Option<
        Vec<crate::app::bsky::richtext::facet::Main>,
    >,
    pub did: atrium_api::types::string::Did,
    pub display_name: String,
    ///Self-label values
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub labels: core::option::Option<atrium_api::types::Union<RecordLabelsRefs>>,
}
pub type Record = atrium_api::types::Object<RecordData>;
impl From<atrium_api::types::Unknown> for RecordData {
    fn from(value: atrium_api::types::Unknown) -> Self {
        Self::try_from_unknown(value).unwrap()
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum RecordLabelsRefs {
    #[serde(rename = "com.atproto.label.defs#selfLabels")]
    ComAtprotoLabelDefsSelfLabels(Box<crate::com::atproto::label::defs::SelfLabels>),
}
