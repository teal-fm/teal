// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `tools.ozone.moderation.defs` namespace.
///Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AccountEventData {
    ///Indicates that the account has a repository which can be fetched from the host that emitted this event.
    pub active: bool,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub status: core::option::Option<String>,
    pub timestamp: atrium_api::types::string::Datetime,
}
pub type AccountEvent = atrium_api::types::Object<AccountEventData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AccountHostingData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub created_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub deactivated_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub deleted_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reactivated_at: core::option::Option<atrium_api::types::string::Datetime>,
    pub status: String,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub updated_at: core::option::Option<atrium_api::types::string::Datetime>,
}
pub type AccountHosting = atrium_api::types::Object<AccountHostingData>;
///Statistics about a particular account subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AccountStatsData {
    ///Total number of appeals against a moderation action on the account
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub appeal_count: core::option::Option<i64>,
    ///Number of times the account was escalated
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub escalate_count: core::option::Option<i64>,
    ///Total number of reports on the account
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub report_count: core::option::Option<i64>,
    ///Number of times the account was suspended
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub suspend_count: core::option::Option<i64>,
    ///Number of times the account was taken down
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub takedown_count: core::option::Option<i64>,
}
pub type AccountStats = atrium_api::types::Object<AccountStatsData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct BlobViewData {
    pub cid: atrium_api::types::string::Cid,
    pub created_at: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub details: core::option::Option<atrium_api::types::Union<BlobViewDetailsRefs>>,
    pub mime_type: String,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub moderation: core::option::Option<Moderation>,
    pub size: i64,
}
pub type BlobView = atrium_api::types::Object<BlobViewData>;
///Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct IdentityEventData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub handle: core::option::Option<atrium_api::types::string::Handle>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub pds_host: core::option::Option<String>,
    pub timestamp: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub tombstone: core::option::Option<bool>,
}
pub type IdentityEvent = atrium_api::types::Object<IdentityEventData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ImageDetailsData {
    pub height: i64,
    pub width: i64,
}
pub type ImageDetails = atrium_api::types::Object<ImageDetailsData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventAcknowledgeData {
    ///If true, all other reports on content authored by this account will be resolved (acknowledged).
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub acknowledge_account_subjects: core::option::Option<bool>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventAcknowledge = atrium_api::types::Object<ModEventAcknowledgeData>;
///Add a comment to a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventCommentData {
    pub comment: String,
    ///Make the comment persistent on the subject
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub sticky: core::option::Option<bool>,
}
pub type ModEventComment = atrium_api::types::Object<ModEventCommentData>;
///Divert a record's blobs to a 3rd party service for further scanning/tagging
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventDivertData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventDivert = atrium_api::types::Object<ModEventDivertData>;
///Keep a log of outgoing email to a user
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventEmailData {
    ///Additional comment about the outgoing comm.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///The content of the email sent to the user.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub content: core::option::Option<String>,
    ///The subject line of the email sent to the user.
    pub subject_line: String,
}
pub type ModEventEmail = atrium_api::types::Object<ModEventEmailData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventEscalateData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventEscalate = atrium_api::types::Object<ModEventEscalateData>;
///Apply/Negate labels on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventLabelData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    pub create_label_vals: Vec<String>,
    ///Indicates how long the label will remain on the subject. Only applies on labels that are being added.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub duration_in_hours: core::option::Option<i64>,
    pub negate_label_vals: Vec<String>,
}
pub type ModEventLabel = atrium_api::types::Object<ModEventLabelData>;
///Mute incoming reports on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventMuteData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///Indicates how long the subject should remain muted.
    pub duration_in_hours: i64,
}
pub type ModEventMute = atrium_api::types::Object<ModEventMuteData>;
///Mute incoming reports from an account
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventMuteReporterData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///Indicates how long the account should remain muted. Falsy value here means a permanent mute.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub duration_in_hours: core::option::Option<i64>,
}
pub type ModEventMuteReporter = atrium_api::types::Object<ModEventMuteReporterData>;
///Set priority score of the subject. Higher score means higher priority.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventPriorityScoreData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    pub score: atrium_api::types::LimitedU8<100u8>,
}
pub type ModEventPriorityScore = atrium_api::types::Object<ModEventPriorityScoreData>;
///Report a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventReportData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub is_reporter_muted: core::option::Option<bool>,
    pub report_type: crate::com::atproto::moderation::defs::ReasonType,
}
pub type ModEventReport = atrium_api::types::Object<ModEventReportData>;
///Resolve appeal on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventResolveAppealData {
    ///Describe resolution.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventResolveAppeal = atrium_api::types::Object<ModEventResolveAppealData>;
///Revert take down action on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventReverseTakedownData {
    ///Describe reasoning behind the reversal.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventReverseTakedown = atrium_api::types::Object<
    ModEventReverseTakedownData,
>;
///Add/Remove a tag on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventTagData {
    ///Tags to be added to the subject. If already exists, won't be duplicated.
    pub add: Vec<String>,
    ///Additional comment about added/removed tags.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated.
    pub remove: Vec<String>,
}
pub type ModEventTag = atrium_api::types::Object<ModEventTagData>;
///Take down a subject permanently or temporarily
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventTakedownData {
    ///If true, all other reports on content authored by this account will be resolved (acknowledged).
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub acknowledge_account_subjects: core::option::Option<bool>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///Indicates how long the takedown should be in effect before automatically expiring.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub duration_in_hours: core::option::Option<i64>,
    ///Names/Keywords of the policies that drove the decision.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub policies: core::option::Option<Vec<String>>,
}
pub type ModEventTakedown = atrium_api::types::Object<ModEventTakedownData>;
///Unmute action on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventUnmuteData {
    ///Describe reasoning behind the reversal.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventUnmute = atrium_api::types::Object<ModEventUnmuteData>;
///Unmute incoming reports from an account
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventUnmuteReporterData {
    ///Describe reasoning behind the reversal.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
}
pub type ModEventUnmuteReporter = atrium_api::types::Object<ModEventUnmuteReporterData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventViewData {
    pub created_at: atrium_api::types::string::Datetime,
    pub created_by: atrium_api::types::string::Did,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub creator_handle: core::option::Option<String>,
    pub event: atrium_api::types::Union<ModEventViewEventRefs>,
    pub id: i64,
    pub subject: atrium_api::types::Union<ModEventViewSubjectRefs>,
    pub subject_blob_cids: Vec<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subject_handle: core::option::Option<String>,
}
pub type ModEventView = atrium_api::types::Object<ModEventViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventViewDetailData {
    pub created_at: atrium_api::types::string::Datetime,
    pub created_by: atrium_api::types::string::Did,
    pub event: atrium_api::types::Union<ModEventViewDetailEventRefs>,
    pub id: i64,
    pub subject: atrium_api::types::Union<ModEventViewDetailSubjectRefs>,
    pub subject_blobs: Vec<BlobView>,
}
pub type ModEventViewDetail = atrium_api::types::Object<ModEventViewDetailData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModerationData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subject_status: core::option::Option<SubjectStatusView>,
}
pub type Moderation = atrium_api::types::Object<ModerationData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModerationDetailData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subject_status: core::option::Option<SubjectStatusView>,
}
pub type ModerationDetail = atrium_api::types::Object<ModerationDetailData>;
///Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordEventData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cid: core::option::Option<atrium_api::types::string::Cid>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    pub op: String,
    pub timestamp: atrium_api::types::string::Datetime,
}
pub type RecordEvent = atrium_api::types::Object<RecordEventData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordHostingData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub created_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub deleted_at: core::option::Option<atrium_api::types::string::Datetime>,
    pub status: String,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub updated_at: core::option::Option<atrium_api::types::string::Datetime>,
}
pub type RecordHosting = atrium_api::types::Object<RecordHostingData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordViewData {
    pub blob_cids: Vec<atrium_api::types::string::Cid>,
    pub cid: atrium_api::types::string::Cid,
    pub indexed_at: atrium_api::types::string::Datetime,
    pub moderation: Moderation,
    pub repo: RepoView,
    pub uri: String,
    pub value: atrium_api::types::Unknown,
}
pub type RecordView = atrium_api::types::Object<RecordViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordViewDetailData {
    pub blobs: Vec<BlobView>,
    pub cid: atrium_api::types::string::Cid,
    pub indexed_at: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub labels: core::option::Option<Vec<crate::com::atproto::label::defs::Label>>,
    pub moderation: ModerationDetail,
    pub repo: RepoView,
    pub uri: String,
    pub value: atrium_api::types::Unknown,
}
pub type RecordViewDetail = atrium_api::types::Object<RecordViewDetailData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordViewNotFoundData {
    pub uri: String,
}
pub type RecordViewNotFound = atrium_api::types::Object<RecordViewNotFoundData>;
///Statistics about a set of record subject items
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordsStatsData {
    ///Number of items that were appealed at least once
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub appealed_count: core::option::Option<i64>,
    ///Number of items that were escalated at least once
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub escalated_count: core::option::Option<i64>,
    ///Number of item currently in "reviewOpen" or "reviewEscalated" state
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub pending_count: core::option::Option<i64>,
    ///Number of item currently in "reviewNone" or "reviewClosed" state
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub processed_count: core::option::Option<i64>,
    ///Number of items that were reported at least once
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reported_count: core::option::Option<i64>,
    ///Total number of item in the set
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subject_count: core::option::Option<i64>,
    ///Number of item currently taken down
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub takendown_count: core::option::Option<i64>,
    ///Cumulative sum of the number of reports on the items in the set
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub total_reports: core::option::Option<i64>,
}
pub type RecordsStats = atrium_api::types::Object<RecordsStatsData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoViewData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub deactivated_at: core::option::Option<atrium_api::types::string::Datetime>,
    pub did: atrium_api::types::string::Did,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub email: core::option::Option<String>,
    pub handle: atrium_api::types::string::Handle,
    pub indexed_at: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invite_note: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invited_by: core::option::Option<crate::com::atproto::server::defs::InviteCode>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invites_disabled: core::option::Option<bool>,
    pub moderation: Moderation,
    pub related_records: Vec<atrium_api::types::Unknown>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub threat_signatures: core::option::Option<
        Vec<crate::com::atproto::admin::defs::ThreatSignature>,
    >,
}
pub type RepoView = atrium_api::types::Object<RepoViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoViewDetailData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub deactivated_at: core::option::Option<atrium_api::types::string::Datetime>,
    pub did: atrium_api::types::string::Did,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub email: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub email_confirmed_at: core::option::Option<atrium_api::types::string::Datetime>,
    pub handle: atrium_api::types::string::Handle,
    pub indexed_at: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invite_note: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invited_by: core::option::Option<crate::com::atproto::server::defs::InviteCode>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invites: core::option::Option<
        Vec<crate::com::atproto::server::defs::InviteCode>,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub invites_disabled: core::option::Option<bool>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub labels: core::option::Option<Vec<crate::com::atproto::label::defs::Label>>,
    pub moderation: ModerationDetail,
    pub related_records: Vec<atrium_api::types::Unknown>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub threat_signatures: core::option::Option<
        Vec<crate::com::atproto::admin::defs::ThreatSignature>,
    >,
}
pub type RepoViewDetail = atrium_api::types::Object<RepoViewDetailData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoViewNotFoundData {
    pub did: atrium_api::types::string::Did,
}
pub type RepoViewNotFound = atrium_api::types::Object<RepoViewNotFoundData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReporterStatsData {
    ///The total number of reports made by the user on accounts.
    pub account_report_count: i64,
    pub did: atrium_api::types::string::Did,
    ///The total number of accounts labeled as a result of the user's reports.
    pub labeled_account_count: i64,
    ///The total number of records labeled as a result of the user's reports.
    pub labeled_record_count: i64,
    ///The total number of reports made by the user on records.
    pub record_report_count: i64,
    ///The total number of accounts reported by the user.
    pub reported_account_count: i64,
    ///The total number of records reported by the user.
    pub reported_record_count: i64,
    ///The total number of accounts taken down as a result of the user's reports.
    pub takendown_account_count: i64,
    ///The total number of records taken down as a result of the user's reports.
    pub takendown_record_count: i64,
}
pub type ReporterStats = atrium_api::types::Object<ReporterStatsData>;
///Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator
pub const REVIEW_CLOSED: &str = "tools.ozone.moderation.defs#reviewClosed";
///Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator
pub const REVIEW_ESCALATED: &str = "tools.ozone.moderation.defs#reviewEscalated";
///Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it
pub const REVIEW_NONE: &str = "tools.ozone.moderation.defs#reviewNone";
///Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator
pub const REVIEW_OPEN: &str = "tools.ozone.moderation.defs#reviewOpen";
pub type SubjectReviewState = String;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SubjectStatusViewData {
    ///Statistics related to the account subject
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub account_stats: core::option::Option<AccountStats>,
    ///True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub appealed: core::option::Option<bool>,
    ///Sticky comment on the subject.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub comment: core::option::Option<String>,
    ///Timestamp referencing the first moderation status impacting event was emitted on the subject
    pub created_at: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub hosting: core::option::Option<
        atrium_api::types::Union<SubjectStatusViewHostingRefs>,
    >,
    pub id: i64,
    ///Timestamp referencing when the author of the subject appealed a moderation action
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub last_appealed_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub last_reported_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub last_reviewed_at: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub last_reviewed_by: core::option::Option<atrium_api::types::string::Did>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub mute_reporting_until: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub mute_until: core::option::Option<atrium_api::types::string::Datetime>,
    ///Numeric value representing the level of priority. Higher score means higher priority.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub priority_score: core::option::Option<atrium_api::types::LimitedU8<100u8>>,
    ///Statistics related to the record subjects authored by the subject's account
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub records_stats: core::option::Option<RecordsStats>,
    pub review_state: SubjectReviewState,
    pub subject: atrium_api::types::Union<SubjectStatusViewSubjectRefs>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subject_blob_cids: core::option::Option<Vec<atrium_api::types::string::Cid>>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subject_repo_handle: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub suspend_until: core::option::Option<atrium_api::types::string::Datetime>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub tags: core::option::Option<Vec<String>>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub takendown: core::option::Option<bool>,
    ///Timestamp referencing when the last update was made to the moderation status of the subject
    pub updated_at: atrium_api::types::string::Datetime,
}
pub type SubjectStatusView = atrium_api::types::Object<SubjectStatusViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct VideoDetailsData {
    pub height: i64,
    pub length: i64,
    pub width: i64,
}
pub type VideoDetails = atrium_api::types::Object<VideoDetailsData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum BlobViewDetailsRefs {
    #[serde(rename = "tools.ozone.moderation.defs#imageDetails")]
    ImageDetails(Box<ImageDetails>),
    #[serde(rename = "tools.ozone.moderation.defs#videoDetails")]
    VideoDetails(Box<VideoDetails>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewDetailEventRefs {
    #[serde(rename = "tools.ozone.moderation.defs#modEventTakedown")]
    ModEventTakedown(Box<ModEventTakedown>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventReverseTakedown")]
    ModEventReverseTakedown(Box<ModEventReverseTakedown>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventComment")]
    ModEventComment(Box<ModEventComment>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventReport")]
    ModEventReport(Box<ModEventReport>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventLabel")]
    ModEventLabel(Box<ModEventLabel>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventAcknowledge")]
    ModEventAcknowledge(Box<ModEventAcknowledge>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventEscalate")]
    ModEventEscalate(Box<ModEventEscalate>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventMute")]
    ModEventMute(Box<ModEventMute>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventUnmute")]
    ModEventUnmute(Box<ModEventUnmute>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventMuteReporter")]
    ModEventMuteReporter(Box<ModEventMuteReporter>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventUnmuteReporter")]
    ModEventUnmuteReporter(Box<ModEventUnmuteReporter>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventEmail")]
    ModEventEmail(Box<ModEventEmail>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventResolveAppeal")]
    ModEventResolveAppeal(Box<ModEventResolveAppeal>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventDivert")]
    ModEventDivert(Box<ModEventDivert>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventTag")]
    ModEventTag(Box<ModEventTag>),
    #[serde(rename = "tools.ozone.moderation.defs#accountEvent")]
    AccountEvent(Box<AccountEvent>),
    #[serde(rename = "tools.ozone.moderation.defs#identityEvent")]
    IdentityEvent(Box<IdentityEvent>),
    #[serde(rename = "tools.ozone.moderation.defs#recordEvent")]
    RecordEvent(Box<RecordEvent>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventPriorityScore")]
    ModEventPriorityScore(Box<ModEventPriorityScore>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewDetailSubjectRefs {
    #[serde(rename = "tools.ozone.moderation.defs#repoView")]
    RepoView(Box<RepoView>),
    #[serde(rename = "tools.ozone.moderation.defs#repoViewNotFound")]
    RepoViewNotFound(Box<RepoViewNotFound>),
    #[serde(rename = "tools.ozone.moderation.defs#recordView")]
    RecordView(Box<RecordView>),
    #[serde(rename = "tools.ozone.moderation.defs#recordViewNotFound")]
    RecordViewNotFound(Box<RecordViewNotFound>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewEventRefs {
    #[serde(rename = "tools.ozone.moderation.defs#modEventTakedown")]
    ModEventTakedown(Box<ModEventTakedown>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventReverseTakedown")]
    ModEventReverseTakedown(Box<ModEventReverseTakedown>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventComment")]
    ModEventComment(Box<ModEventComment>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventReport")]
    ModEventReport(Box<ModEventReport>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventLabel")]
    ModEventLabel(Box<ModEventLabel>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventAcknowledge")]
    ModEventAcknowledge(Box<ModEventAcknowledge>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventEscalate")]
    ModEventEscalate(Box<ModEventEscalate>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventMute")]
    ModEventMute(Box<ModEventMute>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventUnmute")]
    ModEventUnmute(Box<ModEventUnmute>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventMuteReporter")]
    ModEventMuteReporter(Box<ModEventMuteReporter>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventUnmuteReporter")]
    ModEventUnmuteReporter(Box<ModEventUnmuteReporter>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventEmail")]
    ModEventEmail(Box<ModEventEmail>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventResolveAppeal")]
    ModEventResolveAppeal(Box<ModEventResolveAppeal>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventDivert")]
    ModEventDivert(Box<ModEventDivert>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventTag")]
    ModEventTag(Box<ModEventTag>),
    #[serde(rename = "tools.ozone.moderation.defs#accountEvent")]
    AccountEvent(Box<AccountEvent>),
    #[serde(rename = "tools.ozone.moderation.defs#identityEvent")]
    IdentityEvent(Box<IdentityEvent>),
    #[serde(rename = "tools.ozone.moderation.defs#recordEvent")]
    RecordEvent(Box<RecordEvent>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventPriorityScore")]
    ModEventPriorityScore(Box<ModEventPriorityScore>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewSubjectRefs {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    ComAtprotoAdminDefsRepoRef(Box<crate::com::atproto::admin::defs::RepoRef>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    ComAtprotoRepoStrongRefMain(Box<crate::com::atproto::repo::strong_ref::Main>),
    #[serde(rename = "chat.bsky.convo.defs#messageRef")]
    ChatBskyConvoDefsMessageRef(Box<crate::chat::bsky::convo::defs::MessageRef>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum SubjectStatusViewHostingRefs {
    #[serde(rename = "tools.ozone.moderation.defs#accountHosting")]
    AccountHosting(Box<AccountHosting>),
    #[serde(rename = "tools.ozone.moderation.defs#recordHosting")]
    RecordHosting(Box<RecordHosting>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum SubjectStatusViewSubjectRefs {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    ComAtprotoAdminDefsRepoRef(Box<crate::com::atproto::admin::defs::RepoRef>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    ComAtprotoRepoStrongRefMain(Box<crate::com::atproto::repo::strong_ref::Main>),
}
