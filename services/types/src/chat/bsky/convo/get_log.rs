// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `chat.bsky.convo.getLog` namespace.
pub const NSID: &str = "chat.bsky.convo.getLog";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
}
pub type Parameters = atrium_api::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub logs: Vec<atrium_api::types::Union<OutputLogsItem>>,
}
pub type Output = atrium_api::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum OutputLogsItem {
    #[serde(rename = "chat.bsky.convo.defs#logBeginConvo")]
    ChatBskyConvoDefsLogBeginConvo(Box<crate::chat::bsky::convo::defs::LogBeginConvo>),
    #[serde(rename = "chat.bsky.convo.defs#logLeaveConvo")]
    ChatBskyConvoDefsLogLeaveConvo(Box<crate::chat::bsky::convo::defs::LogLeaveConvo>),
    #[serde(rename = "chat.bsky.convo.defs#logCreateMessage")]
    ChatBskyConvoDefsLogCreateMessage(
        Box<crate::chat::bsky::convo::defs::LogCreateMessage>,
    ),
    #[serde(rename = "chat.bsky.convo.defs#logDeleteMessage")]
    ChatBskyConvoDefsLogDeleteMessage(
        Box<crate::chat::bsky::convo::defs::LogDeleteMessage>,
    ),
}
