# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build and Push Services

on:
  push:
    branches: [main]
    paths:
      - "services/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/services.yml"
  pull_request:
    branches: [main]
    paths:
      - "services/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/services.yml"

env:
  REGISTRY: ghcr.io
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:
  detect-services:
    name: Detect Services to Build
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect services with Dockerfiles
        id: detect
        run: |
          services=()
          for service_dir in services/*/; do
            service_name=$(basename "$service_dir")
            # Skip special directories
            if [[ "$service_name" == "target" || "$service_name" == "migrations" || "$service_name" == "types" || "$service_name" == ".sqlx" ]]; then
              continue
            fi
            # Check if service has a Dockerfile
            if [[ -f "$service_dir/Dockerfile" ]]; then
              services+=("$service_name")
            fi
          done

          # Convert to JSON array
          services_json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s .)
          echo "services=$services_json" >> $GITHUB_OUTPUT
          echo "Detected services: $services_json"

  build-service:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-services
    if: needs.detect-services.outputs.services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-services.outputs.services) }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: services

      - name: Run service tests
        run: |
          cd services
          cargo test --all-features --workspace
