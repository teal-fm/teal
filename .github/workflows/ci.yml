# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true
  SQLX_OFFLINE_DIR: "./.sqlx"

jobs:
  setup-and-build:
    name: Setup and Build All
    runs-on: ubuntu-latest
    outputs:
      rust-cache-key: ${{ steps.rust-cache.outputs.cache-hit }}
      node-cache-key: ${{ steps.node-cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-rust: "true"
          setup-node: "true"
          cache-key-suffix: "ci-build"

      - name: Build Node packages
        run: pnpm build

      - name: Build Rust services (x86_64)
        run: |
          cd services
          cargo build --release --all-features

      - name: Build Rust apps (x86_64)
        run: |
          cd apps/aqua
          cargo build --release --all-features

      - name: Upload Node build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-builds
          path: |
            packages/*/dist/
            apps/amethyst/build/
          retention-days: 1

      - name: Upload Rust build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-builds-x86_64
          path: |
            target/release/
            apps/aqua/target/release/
          retention-days: 1

  rust-cross-compile:
    name: Cross-compile Rust
    runs-on: ubuntu-latest
    needs: setup-and-build
    strategy:
      matrix:
        target: [aarch64-unknown-linux-gnu]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-rust: "true"
          setup-node: "true"
          lexicons-only-rust: "true"
          cache-key-suffix: "cross-${{ matrix.target }}"

      - name: Install cross-compilation tools
        run: |
          cargo install cross
          rustup target add ${{ matrix.target }}

      - name: Cross-compile services
        run: |
          cd services
          cross build --release --all-features --target ${{ matrix.target }}

      - name: Cross-compile apps
        run: |
          cd apps/aqua
          cross build --release --all-features --target ${{ matrix.target }}

      - name: Upload cross-compiled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-builds-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/
            apps/aqua/target/${{ matrix.target }}/release/
          retention-days: 1

  rust-quality:
    name: Rust Quality Checks
    runs-on: ubuntu-latest
    needs: setup-and-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-rust: "true"
          setup-node: "true"
          lexicons-only-rust: "true"
          cache-key-suffix: "ci-build"

      - name: Check Rust formatting
        run: |
          cargo fmt --all -- --check
          cd ../apps/aqua && cargo fmt --all -- --check

      - name: Run Clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
          cd ../apps/aqua && cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust tests
        run: |
          cargo test --all-features

  node-quality:
    name: Node.js Quality Checks
    runs-on: ubuntu-latest
    needs: setup-and-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-node: "true"
          cache-key-suffix: "ci-build"

      - name: Download Node build artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-builds
          path: .

      - name: Type check
        run: pnpm typecheck

      - name: Lint and format check
        run: pnpm fix --check

      - name: Run tests
        run: pnpm test

  lexicon-validation:
    name: Lexicon Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-node: "true"

      - name: Validate lexicons
        run: pnpm lex:validate

      - name: Check lexicon generation consistency
        run: |
          pnpm lex:gen
          git diff --exit-code || (echo "Lexicon files are out of sync. Run 'pnpm lex:gen' locally." && exit 1)

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-rust: "true"
          setup-node: "true"
          rust-components: "rustfmt,clippy"
          cache-key-suffix: "security"

      - name: Install and configure cargo-audit
        run: |
          cargo install cargo-audit
          cargo audit fetch

      - name: Run Rust security audit
        run: |
          for dir in services/ apps/aqua/; do
            if [ -f "$dir/Cargo.toml" ]; then
              echo "Running security audit for $dir"
              (cd "$dir" && cargo audit --deny-warnings --deny-unmaintained)
            fi
          done

      - name: Run Node.js security audit
        run: pnpm audit --audit-level=high
